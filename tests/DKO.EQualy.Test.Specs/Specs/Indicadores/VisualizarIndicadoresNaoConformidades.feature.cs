// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DKO.EQualy.Test.Specs.Specs.Indicadores
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class VisualizarIndicadoresFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "VisualizarIndicadoresNaoConformidades.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "VisualizarIndicadores", "Quero consultar os dados registrados de documentos e não conformidade, consolidar" +
                    " os dados para gerar gráficos", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "VisualizarIndicadores")))
            {
                DKO.EQualy.Test.Specs.Specs.Indicadores.VisualizarIndicadoresFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gerar gráficos geral com os dados consolidados")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VisualizarIndicadores")]
        public virtual void GerarGraficosGeralComOsDadosConsolidados()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gerar gráficos geral com os dados consolidados", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 11
testRunner.Given("as datas de <DataInicial> e <DataFinal>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 12
testRunner.When("executar a consulta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 13
testRunner.Then("os gráficos devem ser gerados contendo dados <DadosConsolidados>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gerar Quantidade de RNC registrada por área")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VisualizarIndicadores")]
        public virtual void GerarQuantidadeDeRNCRegistradaPorArea()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gerar Quantidade de RNC registrada por área", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 18
testRunner.Given("as datas de <DataInicial> e <DataFinal>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 19
testRunner.When("executar a consulta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 20
testRunner.Then("o gráfico de quantidade de RNC registrada deve ser gerado contendo dados <DadosCo" +
                    "nsolidados>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gerar Quantidade RNC avaliada por área")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VisualizarIndicadores")]
        public virtual void GerarQuantidadeRNCAvaliadaPorArea()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gerar Quantidade RNC avaliada por área", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 25
testRunner.Given("as datas de <DataInicial> e <DataFinal>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 26
testRunner.When("executar a consulta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 27
testRunner.Then("o gráfico de quantidade de RNC avaliada deve ser gerado contendo dados <DadosCons" +
                    "olidados>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gerar Quantidade\'s registradas")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VisualizarIndicadores")]
        public virtual void GerarQuantidadeSRegistradas()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gerar Quantidade\'s registradas", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 32
testRunner.Given("as datas de <DataInicial> e <DataFinal>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 33
testRunner.When("executar a consulta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 34
testRunner.Then("o gráfico de quantidade\'s registradas deve ser gerado contendo dados <DadosConsol" +
                    "idados>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gerar Quantidade de ação X RNC")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "VisualizarIndicadores")]
        public virtual void GerarQuantidadeDeAcaoXRNC()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gerar Quantidade de ação X RNC", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line 38
testRunner.Given("as datas de <DataInicial> e <DataFinal>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 39
testRunner.When("executar a consulta", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 40
testRunner.Then("o gráfico de quantidade de ação X RNC deve ser gerado contendo dados <DadosConsol" +
                    "idados>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
