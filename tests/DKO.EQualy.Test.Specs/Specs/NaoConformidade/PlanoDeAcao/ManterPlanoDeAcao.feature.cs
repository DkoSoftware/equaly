// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DKO.EQualy.Test.Specs.Specs.NaoConformidade.PlanoDeAcao
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ManterPlanoDeAcaoFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ManterPlanoDeAcao.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "ManterPlanoDeAcao", "\r\nQuero incluir planos de ações", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ManterPlanoDeAcao")))
            {
                DKO.EQualy.Test.Specs.Specs.NaoConformidade.PlanoDeAcao.ManterPlanoDeAcaoFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("registrar um plano de acao do tipo acao corretiva")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManterPlanoDeAcao")]
        public virtual void RegistrarUmPlanoDeAcaoDoTipoAcaoCorretiva()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("registrar um plano de acao do tipo acao corretiva", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Oque",
                        "Quando",
                        "Quem",
                        "Tipo",
                        "Como",
                        "PorQue",
                        "QuantoCusta",
                        "Quando"});
            table1.AddRow(new string[] {
                        "\"O que aconteceu?\"",
                        "\"Quando ocorreu ?\"",
                        "\"Riguel Figueiro\"",
                        "\"Acao Corretiva\"",
                        "\"Como quebrou o produto?\"",
                        "\"Por que quebrou o produto\"",
                        "\"Quanto custou o prejuizo?\"",
                        "\"Quando quebrou o produto?\""});
#line 15
testRunner.Given("as seguintes informações iniciais para a o cadastro de acao corretiva", ((string)(null)), table1, "Dado ");
#line 19
testRunner.When("registrar um plano de ação do tipo acao corretiva", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 20
testRunner.Then("eu espero receber a seguinte informação \"Plano de ação do tipo ação corretiva reg" +
                    "istrada com sucesso!\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 21
testRunner.And("um email de notificação para a o usuario <UsuarioId> deve ser enviado com a segui" +
                    "nte mensagem \"Um questionamento aguarda sua resposta\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("registrar um plano de acao do tipo acao preventiva")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ManterPlanoDeAcao")]
        public virtual void RegistrarUmPlanoDeAcaoDoTipoAcaoPreventiva()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("registrar um plano de acao do tipo acao preventiva", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 8
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Oque",
                        "Quando",
                        "Quem",
                        "Tipo",
                        "Como",
                        "PorQue",
                        "QuantoCusta",
                        "Quando"});
            table2.AddRow(new string[] {
                        "\"O que aconteceu?\"",
                        "\"Quando ocorreu ?\"",
                        "\"Riguel Figueiro\"",
                        "\"Acao Preventiva\"",
                        "\"Como quebrou o produto?\"",
                        "\"Por que quebrou o produto\"",
                        "\"Quanto custou o prejuizo?\"",
                        "\"Quando quebrou o produto?\""});
#line 27
testRunner.Given("as seguintes informações iniciais para a o cadastro de acao preventiva", ((string)(null)), table2, "Dado ");
#line 31
testRunner.When("registrar um plano de ação do tipo acao preventiva", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 32
testRunner.Then("eu espero receber a seguinte informação \"Plano de ação do tipo ação preventiva re" +
                    "gistrada com sucesso!\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line 33
testRunner.And("um email de notificação para a o usuario <UsuarioId> deve ser enviado com a segui" +
                    "nte mensagem \"A ação preventiva codigo aguarda sua elaboração\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
